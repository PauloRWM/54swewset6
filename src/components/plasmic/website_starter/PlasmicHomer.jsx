// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dYGU7pEm8E2XqaQSmkn1DQ
// Component: RbyquhKmHnmj
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { useScreenVariants as useScreenVariantsjUbdmZjHodf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: jUbdm-ZJHodf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dYGU7pEm8E2XqaQSmkn1DQ/projectcss
import sty from "./PlasmicHomer.module.css"; // plasmic-import: RbyquhKmHnmj/css
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: o_4T_a7g4v5j/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: D207vRhF7TWj/icon
import image132ZGQjI4EiPzx from "./images/image13.svg"; // plasmic-import: 2zGQjI4EiPzx/picture

createPlasmicElementProxy;

export const PlasmicHomer__VariantProps = new Array();

export const PlasmicHomer__ArgProps = new Array();

const $$ = {};

function PlasmicHomer__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsjUbdmZjHodf()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ozB0J)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__r1YLr)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"40px"}
                src={{
                  src: image132ZGQjI4EiPzx,
                  fullWidth: 150,
                  fullHeight: 150,
                  aspectRatio: 1
                }}
              />

              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ePnB1)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__p3Q44
                  )}
                  href={"https://www.plasmic.app/"}
                  platform={"react"}
                >
                  {"Services"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ngPlL
                  )}
                  href={"https://www.plasmic.app/"}
                  platform={"react"}
                >
                  {"Features"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__h69V
                  )}
                  href={"https://www.plasmic.app/"}
                  platform={"react"}
                >
                  {"Company"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tm3Rn
                  )}
                  href={"https://www.plasmic.app/"}
                  platform={"react"}
                >
                  {"Contact"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__tLFsK
                  )}
                  href={"https://www.plasmic.app/"}
                  platform={"react"}
                >
                  {"Log in"}
                </PlasmicLink__>
                <BaseButton
                  data-plasmic-name={"ariaButton"}
                  data-plasmic-override={overrides.ariaButton}
                  className={classNames("__wab_instance", sty.ariaButton)}
                  target={$props.openLinkInNewTab ? "_blank" : "_self"}
                >
                  {false ? (
                    <div
                      data-plasmic-name={"softBackground"}
                      data-plasmic-override={overrides.softBackground}
                      className={classNames(projectcss.all, sty.softBackground)}
                    />
                  ) : null}
                  {false ? (
                    <div
                      data-plasmic-name={"border"}
                      data-plasmic-override={overrides.border}
                      className={classNames(projectcss.all, sty.border)}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"interactionEffect"}
                    data-plasmic-override={overrides.interactionEffect}
                    className={classNames(
                      projectcss.all,
                      sty.interactionEffect
                    )}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__w3DsK)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tLf0E)}
                    >
                      <CircleIcon
                        className={classNames(projectcss.all, sty.svg___4KpHc)}
                        role={"img"}
                      />
                    </div>
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Sign up"}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__f9Av)}
                    >
                      <ChevronDownIcon
                        className={classNames(projectcss.all, sty.svg__e30X4)}
                        role={"img"}
                      />
                    </div>
                  </Stack__>
                </BaseButton>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect",
    "text"
  ],

  img: ["img"],
  ariaButton: [
    "ariaButton",
    "softBackground",
    "border",
    "interactionEffect",
    "text"
  ],

  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomer__ArgProps,
          internalVariantPropNames: PlasmicHomer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomer";
  } else {
    func.displayName = `PlasmicHomer.${nodeName}`;
  }
  return func;
}

export const PlasmicHomer = Object.assign(
  // Top-level PlasmicHomer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHomer
    internalVariantProps: PlasmicHomer__VariantProps,
    internalArgProps: PlasmicHomer__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomer;
/* prettier-ignore-end */
