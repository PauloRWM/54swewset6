// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dYGU7pEm8E2XqaQSmkn1DQ
// Component: ImGV05Y_TvMj
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseSlider } from "@plasmicpkgs/react-aria/skinny/registerSlider";
import Label from "../../Label"; // plasmic-import: X6ziBksHmHFB/component
import { BaseSliderOutput } from "@plasmicpkgs/react-aria/skinny/registerSliderOutput";
import { BaseSliderTrack } from "@plasmicpkgs/react-aria/skinny/registerSliderTrack";
import SliderThumb from "../../SliderThumb"; // plasmic-import: ux-bCZNguk89/component
import Description from "../../Description"; // plasmic-import: Y57ZnuZ2Jh4w/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: dYGU7pEm8E2XqaQSmkn1DQ/projectcss
import sty from "./PlasmicRangeSlider.module.css"; // plasmic-import: ImGV05Y_TvMj/css

createPlasmicElementProxy;

export const PlasmicRangeSlider__VariantProps = new Array();

export const PlasmicRangeSlider__ArgProps = new Array(
  "showLabel",
  "showOutputText",
  "showDescription",
  "outputText",
  "minValue",
  "maxValue",
  "step",
  "filled",
  "initialValue",
  "disabled",
  "onChange",
  "ariaLabel",
  "label",
  "thumbs"
);

const $$ = {};

function PlasmicRangeSlider__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          showLabel: true,
          showOutputText: true,
          showDescription: false,
          filled: true,
          initialValue: [25, 75]
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "ariaRangeSlider.value",
        type: "readonly",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props["initialValue"],
        onChangeProp: "onChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const [$ccVariants, setDollarCcVariants] = React.useState({
    disabled: false
  });
  const updateVariant = React.useCallback(changes => {
    setDollarCcVariants(prev => {
      if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
        return prev;
      }
      return { ...prev, ...changes };
    });
  }, []);
  return (
    <BaseSlider
      data-plasmic-name={"ariaRangeSlider"}
      data-plasmic-override={overrides.ariaRangeSlider}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      aria-label={args.ariaLabel}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
        plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
        sty.ariaRangeSlider
      )}
      defaultValue={args.initialValue}
      isDisabled={args.disabled}
      maxValue={args.maxValue}
      minValue={args.minValue}
      onChange={async (...eventArgs) => {
        generateStateOnChangeProp($state, ["ariaRangeSlider", "value"]).apply(
          null,
          eventArgs
        );
      }}
      orientation={"horizontal"}
      plasmicUpdateVariant={updateVariant}
      step={args.step}
      value={generateStateValueProp($state, ["ariaRangeSlider", "value"])}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ha8Hg)}
      >
        {$props.showLabel ? (
          <Label
            data-plasmic-name={"label"}
            data-plasmic-override={overrides.label}
            className={classNames("__wab_instance", sty.label)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4PvFj
                  )}
                >
                  {"Label"}
                </div>
              ),

              value: args.label
            })}
          </Label>
        ) : null}
        {$props.showOutputText ? (
          <BaseSliderOutput
            data-plasmic-name={"ariaSliderOutput"}
            data-plasmic-override={overrides.ariaSliderOutput}
            className={classNames("__wab_instance", sty.ariaSliderOutput)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      $props.outputText ??
                      $state.ariaRangeSlider.value?.join(",")
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </BaseSliderOutput>
        ) : null}
      </Stack__>
      <div className={classNames(projectcss.all, sty.freeBox__gxm88)}>
        <div
          data-plasmic-name={"background"}
          data-plasmic-override={overrides.background}
          className={classNames(projectcss.all, sty.background)}
        >
          <BaseSliderTrack
            data-plasmic-name={"ariaSliderTrack"}
            data-plasmic-override={overrides.ariaSliderTrack}
            className={classNames("__wab_instance", sty.ariaSliderTrack)}
            progressBar={
              $props.filled ? (
                <div
                  data-plasmic-name={"foreground"}
                  data-plasmic-override={overrides.foreground}
                  className={classNames(projectcss.all, sty.foreground)}
                />
              ) : null
            }
          >
            {renderPlasmicSlot({
              defaultContents: (
                <SliderThumb
                  className={classNames(
                    "__wab_instance",
                    sty.sliderThumb__cI919
                  )}
                />
              ),

              value: args.thumbs
            })}
          </BaseSliderTrack>
        </div>
      </div>
      {$props.showDescription ? (
        <Description
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames("__wab_instance", sty.description)}
        />
      ) : null}
    </BaseSlider>
  );
}

const PlasmicDescendants = {
  ariaRangeSlider: [
    "ariaRangeSlider",
    "label",
    "ariaSliderOutput",
    "text",
    "background",
    "ariaSliderTrack",
    "foreground",
    "description"
  ],

  label: ["label"],
  ariaSliderOutput: ["ariaSliderOutput", "text"],
  text: ["text"],
  background: ["background", "ariaSliderTrack", "foreground"],
  ariaSliderTrack: ["ariaSliderTrack", "foreground"],
  foreground: ["foreground"],
  description: ["description"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRangeSlider__ArgProps,
          internalVariantPropNames: PlasmicRangeSlider__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRangeSlider__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "ariaRangeSlider") {
    func.displayName = "PlasmicRangeSlider";
  } else {
    func.displayName = `PlasmicRangeSlider.${nodeName}`;
  }
  return func;
}

export const PlasmicRangeSlider = Object.assign(
  // Top-level PlasmicRangeSlider renders the root element
  makeNodeComponent("ariaRangeSlider"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),
    ariaSliderOutput: makeNodeComponent("ariaSliderOutput"),
    text: makeNodeComponent("text"),
    background: makeNodeComponent("background"),
    ariaSliderTrack: makeNodeComponent("ariaSliderTrack"),
    foreground: makeNodeComponent("foreground"),
    description: makeNodeComponent("description"),
    // Metadata about props expected for PlasmicRangeSlider
    internalVariantProps: PlasmicRangeSlider__VariantProps,
    internalArgProps: PlasmicRangeSlider__ArgProps
  }
);

export default PlasmicRangeSlider;
/* prettier-ignore-end */
